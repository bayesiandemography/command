[{"path":"https://bayesiandemography.github.io/command/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Bayesian Demography Limited Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://bayesiandemography.github.io/command/articles/quickstart.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Quick-Start Guide","text":"increasing modularity - make file behave like function","code":"library(command) library(fs)"},{"path":"https://bayesiandemography.github.io/command/articles/quickstart.html","id":"using-interactively","dir":"Articles","previous_headings":"","what":"Using interactively","title":"Quick-Start Guide","text":"Like ‘assign’, list (show example list()) Allowable elements: character string, eg \"Hello world\" integer scalar, eg 3L numeric scalar, eg 3.141593 date eg .Date(\"2015-11-03\") date-time using POSIXct, e.gas.POSIXct(“2015-11-03 14:23:03”)` date-time using POSIXlt, e.g. .POSIXlt(\"2015-11-03 14:23:03\") NULL","code":""},{"path":"https://bayesiandemography.github.io/command/articles/quickstart.html","id":"using-from-the-command-line","dir":"Articles","previous_headings":"","what":"Using from the command line","title":"Quick-Start Guide","text":"Run script normal","code":". ├── Makefile ├── data │   └── airmiles.csv ├── out ├── report_smooth.Rmd ├── run_all.sh └── src     └── fig_smoothed.R year,passengers 1937,412 1938,480 1939,683 1940,1052 1941,1385 1942,1418 1943,1634 1944,2178 1945,3362 1946,5948 1947,6109 1948,5981 1949,6753 1950,8003 suppressPackageStartupMessages({   library(dplyr)   library(ggplot2)   library(command) })  cmd_assign(.airmiles = \"data/airmiles.csv\",            n = 10,            .out = \"out/fig_smoothed.png\")  ## read in the passenger data airmiles <- read.csv(.airmiles)  ## smooth passenger series smoothed <- airmiles |>   mutate(smoothed = fitted(smooth.spline(x = passengers, nknots = n)))  ## create a plot p <- ggplot(smoothed, aes(x = year)) +   geom_line(aes(y = smoothed)) +   geom_point(aes(y = passengers)) +   ggtitle(paste(\"Smoothed using\", n, \"knots\"))  ## write the plot to a png file png(file = .out,     width = 200,     height = 200) plot(p) dev.off() . ├── Makefile ├── data │   └── airmiles.csv ├── out ├── report_smooth.Rmd ├── run_all.sh └── src     └── fig_smoothed.R Rscript src/fig_smoothed.R data/airmiles.csv 10 out/fig_smoothed.png ✔ `cmd_assign()` created `.airmiles` with value \"data/airmiles.csv\" and class \"character\" ✔ `cmd_assign()` created `n` with value 10 and class \"numeric\" ✔ `cmd_assign()` created `.out` with value \"out/fig_smoothed.png\" and class \"character\" null device            1 . ├── Makefile ├── data │   └── airmiles.csv ├── out │   └── fig_smoothed.png ├── report_smooth.Rmd ├── run_all.sh └── src     └── fig_smoothed.R system2(\"Rscript src/fig_smoothed.R data/airmiles.csv 5 out/fig_smoothed_5.png\") Warning in system2(\"Rscript src/fig_smoothed.R data/airmiles.csv 5 out/fig_smoothed_5.png\"): error in running command dir_tree(regexp = \"quickstart|workflow\", invert = TRUE) . ├── Makefile ├── data │   └── airmiles.csv ├── out │   └── fig_smoothed.png ├── report_smooth.Rmd ├── run_all.sh └── src     └── fig_smoothed.R #system2(\"Rscript src/fig_smoothed.R data/airmiles.csv out/fig_smoothed_7.png --n=7\") --- title: \"Smoothed Passenger Miles\" output: pdf_document ---  ```{r setup, include = FALSE} knitr::opts_chunk$set(echo = FALSE) ```  Smoothed passenger numbers:  ```{r, echo = FALSE, fig.show = \"hold\", out.width = \"49%\"} knitr::include_graphics(c(\"out/fig_smoothed_5.png\", \"out/fig_smoothed_10.png\")) Rscript src/fig_smoothed.R data/airmiles.csv 5 out/fig_smoothed_5.png   Rscript src/fig_smoothed.R data/airmiles.csv 10 out/fig_smoothed_10.png   R --quiet -e \"rmarkdown::render('report_smooth.Rmd')\" # system2(\"sh run_all.sh\")"},{"path":"https://bayesiandemography.github.io/command/articles/quickstart.html","id":"using-from-a-makefile","dir":"Articles","previous_headings":"","what":"Using from a makefile","title":"Quick-Start Guide","text":"","code":".PHONY: all all: report_smooth.pdf  out/fig_smoothed_5.png: src/fig_smoothed.R data/airmiles.csv     Rscript $^ $@ --n=5    out/fig_smoothed_10.png: src/fig_smoothed.R data/airmiles.csv     Rscript $^ $@ --n=10  report_smooth.pdf: report_smooth.Rmd out/fig_smoothed_5.png out/fig_smoothed_10.png     R --quiet -e \"rmarkdown::render('$<')\" system2(\"make\") #system2(\"touch data/airmiles.csv\") system2(\"make\")"},{"path":"https://bayesiandemography.github.io/command/articles/workflow.html","id":"the-problem-of-writing-safe-flexible-data-analysis-code","dir":"Articles","previous_headings":"","what":"The problem of writing safe, flexible data analysis code","title":"Using 'command' in a Data Analysis Workflow","text":"classic example: big file difficult understand slow confusing/unreliable - re-run difficult debug split logical parts (modular), source helps doesn’t totally solve - confusing environment better: break pieces, run environment bit like functions (without global environment) push harder - make inputs outputs completely transparenet re-run - slow  difficult change polluted environment classic software solution: break small files run ? [https://stemurphy.com/post/rep_manu_think_about/]","code":""},{"path":"https://bayesiandemography.github.io/command/articles/workflow.html","id":"other-solutions","dir":"Articles","previous_headings":"","what":"Other solutions","title":"Using 'command' in a Data Analysis Workflow","text":"commandArgs docopt ? Principles file organization don’t distinguish intermediate final outputs (everything ) don’t number files","code":""},{"path":"https://bayesiandemography.github.io/command/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"John Bryant. Author, maintainer. Bayesian Demography Limited. Copyright holder.","code":""},{"path":"https://bayesiandemography.github.io/command/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bryant J (2025). command: Process Command Line Arguments Function-Like Way. R package version 0.1.0, https://bayesiandemography.github.io/command/.","code":"@Manual{,   title = {command: Process Command Line Arguments in a Function-Like Way},   author = {John Bryant},   year = {2025},   note = {R package version 0.1.0},   url = {https://bayesiandemography.github.io/command/}, }"},{"path":"https://bayesiandemography.github.io/command/index.html","id":"command","dir":"","previous_headings":"","what":"Process Command Line Arguments in a Function-Like Way","title":"Process Command Line Arguments in a Function-Like Way","text":"Turn arguments passed command line objects current environment. Scripts behave like functions, leading safer, modular workflow.","code":""},{"path":"https://bayesiandemography.github.io/command/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Process Command Line Arguments in a Function-Like Way","text":"","code":"devtools::install_github(\"bayesiandemography/command\")"},{"path":"https://bayesiandemography.github.io/command/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Process Command Line Arguments in a Function-Like Way","text":"","code":"cmd_assign(survey_file = \"out/survey_file.rds\",            n_iterations = 1000,            trim_outliers = TRUE)"},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":null,"dir":"Reference","previous_headings":"","what":"Process command line arguments — cmd_assign","title":"Process command line arguments — cmd_assign","text":"Create objects current environment, based arguments passed command line. instance, script tidy_data.R containing lines cmd_assign(raw_data = \"raw_data.rds\", unit = \"kg\") run command line using Rscript tidy_data.R raw_data.rds --unit=kg objects called raw_data unit created current environment.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process command line arguments — cmd_assign","text":"","code":"cmd_assign(...)"},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process command line arguments — cmd_assign","text":"... Name-value pairs.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process command line arguments — cmd_assign","text":"cmd_assign() called side effect, create objects current environment. However, cmd_assign() also invisibly returns named list objects.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":"types-of-session","dir":"Reference","previous_headings":"","what":"Types of session","title":"Process command line arguments — cmd_assign","text":"cmd_assign() behaves differently depending called: cmd_assign() called inside script run command line, processes values passed command line. cmd_assign() called interactive session, uses name-value pairs call. cmd_assign() typically used interactively developing testing code, command line mode code mature.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":"matching-names-and-values","dir":"Reference","previous_headings":"","what":"Matching names and values","title":"Process command line arguments — cmd_assign","text":"used command line mode, cmd_assign() first processes named command-line arguments, processes unnamed command-line arguments. cmd_assign() treats command-line argument named argument form -<single-letter>=<value>, eg -n=100, --<name>=<value>, eg --n_iteration=100. (Note spaces around equals signs.) cmd_assign() matches unnamed command line arguments order appear. , instance, script analysis.R containing lines   launched command line using   cmd_assign() proceeds follows: Named command-line arguments --max_age=90. Look call cmd_assign() argument called max_age.  one, create object called max_age holding value 90. , raise error. --impute=TRUE. Look call cmd_assign() argument called impute. one, create object called impute holding value TRUE. , raise error. Unnamed command-line arguments person.csv. Count number unused name-value pairs call cmd_assign(). exactly one, create object name holding value \"person.csv\". , raise error.","code":"cmd_assign(data = \"person.csv\",            impute = TRUE,            max_age = 85) Rscript analysis.R --max_age=90 person.csv --impute=TRUE"},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":"creating-objects","dir":"Reference","previous_headings":"","what":"Creating objects","title":"Process command line arguments — cmd_assign","text":"way object created current R environment depends type value passed command line sometimes value supplied default.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":"value-looks-like-a-rds-file-path","dir":"Reference","previous_headings":"","what":"Value looks like a .rds file path","title":"Process command line arguments — cmd_assign","text":"value looks like file path .rds object (ie object created function  base::saveRDS), cmd_assign() tries load .rds file. instance, interactive session, cmd_assign(costs = \"costs.rds\") equivalent costs <- readRDS(\"costs.rds\") avoid automatically loading .rds file, give argument name  starts dot. instance, interactive session, cmd_assign(.costs = \"costs.rds\") equivalent .costs <- \"costs.rds\"","code":""},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":"default-is-logical-integer-or-double","dir":"Reference","previous_headings":"","what":"Default is logical, integer, or double","title":"Process command line arguments — cmd_assign","text":"default value logical, integer, double, cmd_assign() try convert value supplied command line type. instance, call cmd_assign cmd_assign(x_lgl = FALSE, x_int = 3L, x_dbl = 3.142) passing values \"TRUE\", \"2\", \"2.718\" command line equivalent ","code":"x_lgl <- TRUE x_int <- 2L x_dbl <- 2.718"},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":"everything-else","dir":"Reference","previous_headings":"","what":"Everything else","title":"Process command line arguments — cmd_assign","text":"Otherwise, arguments passed command line copied current environment, named strings.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process command line arguments — cmd_assign","text":"","code":"if (FALSE) { # \\dontrun{ cmd_assign(p_inputs = \"data/inputs.csv\",            fitted_values = \"out/fitted_values.rds\",            variant = \"low\",            size = 12.2) ## In an interactive session, this is equivalent to p_inputs <- \"data/inputs.csv\" fitted_values <- readRDS(\"out/fitted_values.rds\") variant <- \"low\" size <- 12.2 } # }"},{"path":"https://bayesiandemography.github.io/command/reference/command-package.html","id":null,"dir":"Reference","previous_headings":"","what":"command: Process command line arguments — command-package","title":"command: Process command line arguments — command-package","text":"Process arguments passed command line, make scripts behave little like functions.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/command-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"command: Process command line arguments — command-package","text":"package contains single function: cmd_assign(). vignette vignette(\"command\", package = \"command\") gives examples, discusses cmd_assign() can used make data analysis workflow safer modular.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/command/reference/command-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"command: Process command line arguments — command-package","text":"Maintainer: John Bryant john@bayesiandemography.com contributors: Bayesian Demography Limited [copyright holder]","code":""},{"path":"https://bayesiandemography.github.io/command/reference/is_varname_valid.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that 'nm' is a Valid Name for an Object in R — is_varname_valid","title":"Check that 'nm' is a Valid Name for an Object in R — is_varname_valid","text":"Check 'nm' Valid Name Object R","code":""},{"path":"https://bayesiandemography.github.io/command/reference/is_varname_valid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that 'nm' is a Valid Name for an Object in R — is_varname_valid","text":"","code":"is_varname_valid(nm)"},{"path":"https://bayesiandemography.github.io/command/reference/is_varname_valid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that 'nm' is a Valid Name for an Object in R — is_varname_valid","text":"nm string","code":""},{"path":"https://bayesiandemography.github.io/command/reference/is_varname_valid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that 'nm' is a Valid Name for an Object in R — is_varname_valid","text":"TRUE FALSE noRd","code":""}]
