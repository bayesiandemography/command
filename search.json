[{"path":"https://bayesiandemography.github.io/command/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Bayesian Demography Limited Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://bayesiandemography.github.io/command/articles/quickstart.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Quick Start Guide","text":"article shows get started package command. ideally read combination article Workflow Data Analysis. command contains single function, cmd_assign(), assigns objects working environment. cmd_assign() can called two ways: Interatively Inside script run command line Case 2 important one. Case 1 simpler, however, look first.","code":""},{"path":"https://bayesiandemography.github.io/command/articles/quickstart.html","id":"calling-cmd_assign-interactively","dir":"Articles","previous_headings":"","what":"Calling cmd_assign() interactively","title":"Quick Start Guide","text":"Running effect running code snippets add two objects working environment, names \"obj1\" \"obj2\", values \"orange\" 1. Objects assigned cmd_assign() can following classes: character, eg \"Hello world\" integer, eg 3L numeric, eg 3.141593 date, eg .Date(\"2015-11-03\") date-time using POSIXct, eg .POSIXct(\"2015-11-03 14:23:03\") date-time using POSIXlt, eg .POSIXlt(\"2015-11-03 14:23:03\") NULL objects must length 1, except NULL, length 0. typical reason using cmd_assign() interactively develop code eventually sit script run command line. common way run R scripts command line Rscript, take detour look .","code":"cmd_assign(obj1 = \"a\",            obj2 = 1\")) obj1 <- \"orange\" obj2 <- 1"},{"path":"https://bayesiandemography.github.io/command/articles/quickstart.html","id":"rscript","dir":"Articles","previous_headings":"","what":"Rscript","title":"Quick Start Guide","text":"Rscript application running R scripts command line. introduction command line, see episodes 1–3 Unix Shell. introduction Rscript, see Command-Line Programs. simplest usage command like launches new R session, runs whatever code myfile.R, ends session. session ends, objects disappear, unless saved disk. Rscript accepts additional arguments, placed path file run, example, --n_iteration=10 named argument, output.rds unnamed argument. Named arguments format Note must space name, = sign, value, invalid: Rscript called additional arguments, Rscript supplies names values arguments R session. names values can accessed within session using base R function commandArgs(). Working commandArgs() , however, tricky. cmd_assign() alternative commandArgs(), designed specifically workflows data analysis.","code":"Rscript myfile.R Rscript myfile.R --n_iteration=10 output.rds --<name>=<value> Rscript myfile.R --n_iteration = 10 output.rds   # invalid!"},{"path":"https://bayesiandemography.github.io/command/articles/quickstart.html","id":"calling-cmd_assign-inside-a-script","dir":"Articles","previous_headings":"","what":"Calling cmd_assign() inside a script","title":"Quick Start Guide","text":"work example call cmd_assign() inside script run command line. current working directory contains two files: file airmiles.csv holds data annual passenger numbers: file fig_smoothed.R contains following code: code reads data file whose name specified .airmiles, smooths passenger data, amount smoothing controlled n_knot, plots smoothed unsmoothed values, writes plot file whose name specified .. use Rscript run code command line. Rscript started new R session, ran code using command line arguments passed , ended session. call cmd_assign() fig_smoothed.R created objects .airmiles, n_knot, .inside R session. values objects taken command line, original call cmd_assign(). Hence, n_knot equaled 8 rather 10, .equaled \"fig_smoothed_8.png\" rather \"fig_smoothed.png\". working directory now looks like : new file called \"fig_smoothed_8.png\".","code":". ├── airmiles.csv ├── fig_smoothed.R └── report.qmd year,passengers 1937,412 1938,480 1939,683 1940,1052 1941,1385 1942,1418 1943,1634 1944,2178 1945,3362 1946,5948 1947,6109 1948,5981 1949,6753 1950,8003 ## Specify packages, inputs, and outputs ------------------  suppressPackageStartupMessages({   library(dplyr)   library(ggplot2)   library(command) })  cmd_assign(.airmiles = \"data/airmiles.csv\",            n_knot = 10,            .out = \"fig_smoothed.png\")   ## Read in data -------------------------------------------  airmiles <- read.csv(.airmiles)   ## Analyse ------------------------------------------------  smoothed <- airmiles |>   mutate(smoothed = fitted(smooth.spline(x = passengers,                                          nknots = n_knot)))  p <- ggplot(smoothed, aes(x = year)) +   geom_line(aes(y = smoothed)) +   geom_point(aes(y = passengers)) +   ggtitle(paste(\"Smoothed using\", n_knot, \"knots\"))   ## Save results -------------------------------------------  png(file = .out, width = 200, height = 200) plot(p) dev.off() Rscript fig_smoothed.R airmiles.csv 8 fig_smoothed_8.png ✔ Assigned object `.airmiles` with value \"airmiles.csv\" and class \"character\". ✔ Assigned object `n_knot` with value 8 and class \"numeric\". ✔ Assigned object `.out` with value \"fig_smoothed_8.png\" and class \"character\". null device            1 . ├── airmiles.csv ├── fig_smoothed.R ├── fig_smoothed_8.png └── report.qmd"},{"path":"https://bayesiandemography.github.io/command/articles/quickstart.html","id":"what-cmd_assign-does-when-called-in-a-script","dir":"Articles","previous_headings":"","what":"What cmd_assign() does when called in a script","title":"Quick Start Guide","text":"cmd_assign() called script run command line, three things: Match command line arguments arguments cmd_assign(). Coerce value supplied command line class corresponding value call cmd_assign(). Assign resulting values working environment. Say, instance, script called model.R containing following call cmd_assign(). run model.R command line using first called, cmd_assign() holds following values: match step, `cmd_assign() finds values passed command line. First matches named arguments command line named arguments call, yielding matches unnamed arguments command line unused arguments call. matching unnamed arguments based order unnamed arguments supplied command line. example, value \"data/dataset2.csv\" passed \"/model2.rds\", \"data/dataset2.csv\" comes \"/model2.rds\" matched results. values supplied command line start text strings. coerce step, cmd_assign() converts values classs matched values cmd_assign(). example, means coercing \"10\" numeric coercing \"TRUE\" logical. Finally, assign step, cmd_assign() puts values working environment. number arguments passed command line must exactly match number arguments specified call cmd_assign(). Values specified call cmd_assign() act defaults. instance, example, cmd_assign() let us omit use_log, following invalid:","code":"cmd_assign(.data = \"data/dataset.csv\",            n_iter = 5,            use_log = TRUE,            .out = \"out/model.rds\") Rscript model.R data/dataset2.csv out/model2.rds --use_log=TRUE --n_iter=10 Rscript model.R data/dataset2.csv out/model2.rds --n_iter=10  # invalid!"},{"path":[]},{"path":"https://bayesiandemography.github.io/command/articles/quickstart.html","id":"argument-names-starting-with-a-dot","dir":"Articles","previous_headings":"Naming conventions","what":"Argument names starting with a dot","title":"Quick Start Guide","text":"examples far, objects holding paths filenames conformed particular naming convention convention: objects names start dot. instance: idea behind convention distinguish values references. n_iter use_log example hold values directly used analysis. .data ., contrast, describe values stored. distinction analogous one ordinary variables pointers C. access values referred “dot” variables, use function readRDS() read_csv(), dot-name convention compulsory, cmd_assign() check . convention nevertheless worth following, can easy practice get confused value reference value.","code":"cmd_assign(.data = \"data/dataset.csv\", # '.data' starts with a dot            n_iter = 5,            use_log = TRUE,            .out = \"out/model.rds\")     # '.out' starts with a dot data <- read_csv(.data)"},{"path":"https://bayesiandemography.github.io/command/articles/quickstart.html","id":"giving-code-files-and-outputs-the-same-base-name","dir":"Articles","previous_headings":"Naming conventions","what":"Giving code files and outputs the same base name","title":"Quick Start Guide","text":"Another feature examples far files R code base name files generated output. File fig_smoothed.R, instance, generated fig_smooth.png, fig_smooth_5.png, fig_smooth_8.png, fig_smooth_10.png, file model.R generated model.rds model2.rds. rely file extensions (eg .R vs .png) distinguish code outputs, use suffixes (eg _5, _8 _10) distinguish different versions output. Naming conventions like common system programming, good way signal relationship code outputs.","code":""},{"path":"https://bayesiandemography.github.io/command/articles/quickstart.html","id":"putting-calls-to-rscript-in-a-shell-script","dir":"Articles","previous_headings":"","what":"Putting calls to Rscript in a shell script","title":"Quick Start Guide","text":"can create data analysis workflow writing shell script calls Rscript. illustrate simple example. need two new files. first file, called report.qmd, creates two figures. contains following code. second file, called workflow.sh, shell script runs whole workflow. contains following code: third line workflow.sh contains \"-e\" \"Rscript\". \"-e\" option tells Rscript work single R expression (follows immediately \"-e\"), rather file. run workflow.sh. working directory now contains two graphs report (plus directory, called report_files, created quarto.) report looks like :  use spline smooth data passenger miles. use spline 5 knots:  use spline 10 knots:","code":"--- title: \"Smoothed Passenger Miles\" format: html ---  We use a spline to smooth data on passenger miles.  Here use a spline with 5 knots: ```{r} #| label: fig_smoothed_5 #| echo: false knitr::include_graphics(\"fig_smoothed_5.png\") ```  Here we use a spline with 10 knots: ```{r} #| label: fig_smoothed_10 #| echo: false knitr::include_graphics(\"fig_smoothed_10.png\") ``` Rscript fig_smoothed.R airmiles.csv 5 fig_smoothed_5.png   Rscript fig_smoothed.R airmiles.csv 10 fig_smoothed_10.png   Rscript -e \"quarto::quarto_render('report.qmd')\" bash workflow.sh ✔ Assigned object `.airmiles` with value \"airmiles.csv\" and class \"character\". ✔ Assigned object `n_knot` with value 5 and class \"numeric\". ✔ Assigned object `.out` with value \"fig_smoothed_5.png\" and class \"character\". null device            1  ✔ Assigned object `.airmiles` with value \"airmiles.csv\" and class \"character\". ✔ Assigned object `n_knot` with value 10 and class \"numeric\". ✔ Assigned object `.out` with value \"fig_smoothed_10.png\" and class \"character\". null device            1    processing file: report.qmd 1/5                   2/5 [fig_smoothed_5]  3/5                   4/5 [fig_smoothed_10] 5/5                   output file: report.knit.md  pandoc    to: html   output-file: report.html   standalone: true   section-divs: true   html-math-method: mathjax   wrap: none   default-image-extension: png   variables: {}    metadata   document-css: false   link-citations: true   date-format: long   lang: en   title: Smoothed Passenger Miles    Output created: report.html . ├── airmiles.csv ├── fig_smoothed.R ├── fig_smoothed_10.png ├── fig_smoothed_5.png ├── fig_smoothed_8.png ├── report.html ├── report.qmd ├── report_files └── workflow.sh"},{"path":"https://bayesiandemography.github.io/command/articles/quickstart.html","id":"putting-calls-to-rscript-in-a-makefile","dir":"Articles","previous_headings":"","what":"Putting calls to Rscript in a makefile","title":"Quick Start Guide","text":"even better way organize data analysis workflow put Rscript commands makefile. introduction makefiles, see Project Management Make. makefile equivalent workflow.sh file: delete fig_smoothed_5.png run makefile. Whereas bash script workflow.sh recreated fig_smoothed_5.png, fig_smoothed_10.png report.html, Make recognises fig_smoothed_10.png still --date, recreates fig_smoothed_5.png report.html. Makefiles take time master, important advantages, discuss Workflow Data Analysis.","code":".PHONY: all all: report.pdf  fig_smoothed_5.png: fig_smoothed.R airmiles.csv     Rscript $^ $@ --n_knot=5    fig_smoothed_10.png: fig_smoothed.R airmiles.csv     Rscript $^ $@ --n_knot=10  report.pdf: report.qmd fig_smoothed_5.png fig_smoothed_10.png     Rscript -e \"quarto::quarto_render('$<')\" rm fig_smoothed_5.png make Rscript fig_smoothed.R airmiles.csv fig_smoothed_5.png --n_knot=5   ✔ Assigned object `.airmiles` with value \"airmiles.csv\" and class \"character\". ✔ Assigned object `n_knot` with value 5 and class \"numeric\". ✔ Assigned object `.out` with value \"fig_smoothed_5.png\" and class \"character\". null device            1  Rscript -e \"quarto::quarto_render('report.qmd')\"   processing file: report.qmd 1/5                   2/5 [fig_smoothed_5]  3/5                   4/5 [fig_smoothed_10] 5/5                   output file: report.knit.md  pandoc    to: html   output-file: report.html   standalone: true   section-divs: true   html-math-method: mathjax   wrap: none   default-image-extension: png   variables: {}    metadata   document-css: false   link-citations: true   date-format: long   lang: en   title: Smoothed Passenger Miles    Output created: report.html"},{"path":"https://bayesiandemography.github.io/command/articles/quickstart.html","id":"sec:alt","dir":"Articles","previous_headings":"","what":"Alternatives to cmd_assign()","title":"Quick Start Guide","text":"cmd_assign() option processing command line arguments. One example commandArgs() package R.utils, user-friendly version base R function commandArgs(), many additional processing options. Another package docopt, can used construct interface script, including processing command line arguments. cmd_assign() specialised commandArgs() docopt. focuses specifically task processing command line arguments part data analysis workflow. allows simpler interface, automation.","code":""},{"path":"https://bayesiandemography.github.io/command/articles/workflow.html","id":"the-problem-of-writing-safe-flexible-data-analysis-code","dir":"Articles","previous_headings":"","what":"The problem of writing safe, flexible data analysis code","title":"A Workflow for Data Analysis","text":"classic example: big file difficult understand slow confusing/unreliable - re-run difficult debug split logical parts (modular), source helps doesn’t totally solve - confusing environment better: break pieces, run environment bit like functions (without global environment) push harder - make inputs outputs completely transparenet re-run - slow  difficult change polluted environment classic software solution: break small files run ? [https://stemurphy.com/post/rep_manu_think_about/]","code":""},{"path":"https://bayesiandemography.github.io/command/articles/workflow.html","id":"other-solutions","dir":"Articles","previous_headings":"","what":"Other solutions","title":"A Workflow for Data Analysis","text":"commandArgs docopt ? Principles file organization don’t distinguish intermediate final outputs (everything ) don’t number files","code":""},{"path":"https://bayesiandemography.github.io/command/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"John Bryant. Author, maintainer. Bayesian Demography Limited. Copyright holder.","code":""},{"path":"https://bayesiandemography.github.io/command/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bryant J (2025). command: Process Command Line Arguments Function-Like Way. R package version 0.1.0, https://bayesiandemography.github.io/command/.","code":"@Manual{,   title = {command: Process Command Line Arguments in a Function-Like Way},   author = {John Bryant},   year = {2025},   note = {R package version 0.1.0},   url = {https://bayesiandemography.github.io/command/}, }"},{"path":"https://bayesiandemography.github.io/command/index.html","id":"command","dir":"","previous_headings":"","what":"Process Command Line Arguments in a Function-Like Way","title":"Process Command Line Arguments in a Function-Like Way","text":"Turn arguments passed command line objects current environment. Scripts behave like functions, leading safer, modular workflow.","code":""},{"path":"https://bayesiandemography.github.io/command/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Process Command Line Arguments in a Function-Like Way","text":"","code":"devtools::install_github(\"bayesiandemography/command\")"},{"path":"https://bayesiandemography.github.io/command/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Process Command Line Arguments in a Function-Like Way","text":"","code":"cmd_assign(survey_file = \"out/survey_file.rds\",            n_iterations = 1000,            trim_outliers = TRUE)"},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":null,"dir":"Reference","previous_headings":"","what":"Process command line arguments — cmd_assign","title":"Process command line arguments — cmd_assign","text":"Create objects current environment, based arguments passed command line. instance, script tidy_data.R containing lines cmd_assign(raw_data = \"raw_data.rds\", unit = \"kg\") run command line using Rscript tidy_data.R raw_data.rds --unit=kg objects called raw_data unit created current environment.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process command line arguments — cmd_assign","text":"","code":"cmd_assign(...)"},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process command line arguments — cmd_assign","text":"... Name-value pairs.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process command line arguments — cmd_assign","text":"cmd_assign() called side effect, create objects current environment. However, cmd_assign() also invisibly returns named list objects.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":"types-of-session","dir":"Reference","previous_headings":"","what":"Types of session","title":"Process command line arguments — cmd_assign","text":"cmd_assign() behaves differently depending called: cmd_assign() called inside script run command line, processes values passed command line. cmd_assign() called interactive session, uses name-value pairs call. cmd_assign() typically used interactively developing testing code, command line mode code mature.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":"matching-names-and-values","dir":"Reference","previous_headings":"","what":"Matching names and values","title":"Process command line arguments — cmd_assign","text":"used command line mode, cmd_assign() first processes named command-line arguments, processes unnamed command-line arguments. cmd_assign() treats command-line argument named argument form -<single-letter>=<value>, eg -n=100, --<name>=<value>, eg --n_iteration=100. (Note spaces around equals signs.) cmd_assign() matches unnamed command line arguments order appear. , instance, script analysis.R containing lines   launched command line using   cmd_assign() proceeds follows: Named command-line arguments --max_age=90. Look call cmd_assign() argument called max_age.  one, create object called max_age holding value 90. , raise error. --impute=TRUE. Look call cmd_assign() argument called impute. one, create object called impute holding value TRUE. , raise error. Unnamed command-line arguments person.csv. Count number unused name-value pairs call cmd_assign(). exactly one, create object name holding value \"person.csv\". , raise error.","code":"cmd_assign(data = \"person.csv\",            impute = TRUE,            max_age = 85) Rscript analysis.R --max_age=90 person.csv --impute=TRUE"},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":"creating-objects","dir":"Reference","previous_headings":"","what":"Creating objects","title":"Process command line arguments — cmd_assign","text":"way object created current R environment depends type value passed command line sometimes value supplied default.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":"value-looks-like-a-rds-file-path","dir":"Reference","previous_headings":"","what":"Value looks like a .rds file path","title":"Process command line arguments — cmd_assign","text":"value looks like file path .rds object (ie object created function  base::saveRDS), cmd_assign() tries load .rds file. instance, interactive session, cmd_assign(costs = \"costs.rds\") equivalent costs <- readRDS(\"costs.rds\") avoid automatically loading .rds file, give argument name  starts dot. instance, interactive session, cmd_assign(.costs = \"costs.rds\") equivalent .costs <- \"costs.rds\"","code":""},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":"default-is-logical-integer-or-double","dir":"Reference","previous_headings":"","what":"Default is logical, integer, or double","title":"Process command line arguments — cmd_assign","text":"default value logical, integer, double, cmd_assign() try convert value supplied command line type. instance, call cmd_assign cmd_assign(x_lgl = FALSE, x_int = 3L, x_dbl = 3.142) passing values \"TRUE\", \"2\", \"2.718\" command line equivalent ","code":"x_lgl <- TRUE x_int <- 2L x_dbl <- 2.718"},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":"everything-else","dir":"Reference","previous_headings":"","what":"Everything else","title":"Process command line arguments — cmd_assign","text":"Otherwise, arguments passed command line copied current environment, named strings.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process command line arguments — cmd_assign","text":"","code":"if (interactive()) {   cmd_assign(.data = \"mydata.csv\",              n_iter = 2000,              .out = \"results.rds\") }"},{"path":"https://bayesiandemography.github.io/command/reference/command-package.html","id":null,"dir":"Reference","previous_headings":"","what":"command: Process command line arguments — command-package","title":"command: Process command line arguments — command-package","text":"Process arguments passed command line, make scripts behave little like functions.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/command-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"command: Process command line arguments — command-package","text":"package contains single function: cmd_assign(). vignette vignette(\"command\", package = \"command\") gives examples, discusses cmd_assign() can used make data analysis workflow safer modular.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/command/reference/command-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"command: Process command line arguments — command-package","text":"Maintainer: John Bryant john@bayesiandemography.com contributors: Bayesian Demography Limited [copyright holder]","code":""}]
