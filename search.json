[{"path":"https://bayesiandemography.github.io/command/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Bayesian Demography Limited Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://bayesiandemography.github.io/command/articles/quickstart.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Quick Start Guide","text":"article shows get started package command. ideally read combination article Workflow Data Analysis. command contains single function, cmd_assign(), assigns objects global environment. cmd_assign() can called two ways: Interatively Inside script run command line Case 2 important one. Case 1 simpler, however, look first.","code":""},{"path":"https://bayesiandemography.github.io/command/articles/quickstart.html","id":"calling-cmd_assign-interactively","dir":"Articles","previous_headings":"","what":"Calling cmd_assign() interactively","title":"Quick Start Guide","text":"Running effect running code snippets add two objects global environment, names \"obj1\" \"obj2\", values \"orange\" 1. Objects assigned cmd_assign() can following classes: character, eg \"Hello world\" integer, eg 3L numeric, eg 3.141593 date, eg .Date(\"2015-11-03\") date-time using POSIXct, eg .POSIXct(\"2015-11-03 14:23:03\") date-time using POSIXlt, eg .POSIXlt(\"2015-11-03 14:23:03\") NULL objects must length 1, except NULL, length 0. typical reason using cmd_assign() interactively develop code eventually sit script run command line. common way run R scripts command line Rscript, take detour look .","code":"cmd_assign(obj1 = \"a\",            obj2 = 1\")) obj1 <- \"orange\" obj2 <- 1"},{"path":"https://bayesiandemography.github.io/command/articles/quickstart.html","id":"rscript","dir":"Articles","previous_headings":"","what":"Rscript","title":"Quick Start Guide","text":"Rscript application running R scripts command line. introduction command line, see episodes 1–3 Unix Shell. introduction Rscript, see Command-Line Programs. simplest usage command like launches new R session, runs whatever code myfile.R, ends session. session ends, objects disappear, unless saved disk. Rscript accepts additional arguments, placed path file run, example, --n_iteration=10 named argument, output.rds unnamed argument. Named arguments format Note must space name, = sign, value, invalid: Named arguments can also single dash single letter, Rscript called additional arguments, Rscript supplies names values arguments R session. names values can accessed within session using base R function commandArgs(). Working commandArgs() , however, tricky. cmd_assign() alternative commandArgs(), designed specifically workflows data analysis.","code":"Rscript myfile.R Rscript myfile.R --n_iteration=10 output.rds --<name>=<value> Rscript myfile.R --n_iteration = 10 output.rds   # invalid! Rscript myfile.R -n=10"},{"path":"https://bayesiandemography.github.io/command/articles/quickstart.html","id":"calling-cmd_assign-inside-a-script","dir":"Articles","previous_headings":"","what":"Calling cmd_assign() inside a script","title":"Quick Start Guide","text":"work example call cmd_assign() inside script run command line. current working directory contains two files: file airmiles.csv holds data annual passenger numbers: file fig_smoothed.R contains following code: code reads data file whose name specified .airmiles, smooths passenger data, amount smoothing controlled n_knot, plots smoothed unsmoothed values, writes plot file whose name specified .. use Rscript run code command line. Rscript started new R session, ran code using command line arguments passed , ended session. call cmd_assign() fig_smoothed.R created objects .airmiles, n_knot, .inside R session. values objects taken command line, original call cmd_assign(). Hence, n_knot equaled 8 rather 10, .equaled \"fig_smoothed_8.png\" rather \"fig_smoothed.png\". working directory now looks like : new file called \"fig_smoothed_8.png\".","code":". ├── airmiles.csv ├── fig_smoothed.R └── report.qmd year,passengers 1937,412 1938,480 1939,683 1940,1052 1941,1385 1942,1418 1943,1634 1944,2178 1945,3362 1946,5948 1947,6109 1948,5981 1949,6753 1950,8003 ## Specify packages, inputs, and outputs ------------------  suppressPackageStartupMessages({   library(dplyr)   library(ggplot2)   library(command) })  cmd_assign(.airmiles = \"data/airmiles.csv\",            n_knot = 10,            .out = \"fig_smoothed.png\")   ## Read in data -------------------------------------------  airmiles <- read.csv(.airmiles)   ## Analyse ------------------------------------------------  smoothed <- airmiles |>   mutate(smoothed = fitted(smooth.spline(x = passengers,                                          nknots = n_knot)))  p <- ggplot(smoothed, aes(x = year)) +   geom_line(aes(y = smoothed)) +   geom_point(aes(y = passengers)) +   ggtitle(paste(\"Smoothed using\", n_knot, \"knots\"))   ## Save results -------------------------------------------  png(file = .out, width = 200, height = 200) plot(p) dev.off() Rscript fig_smoothed.R airmiles.csv 8 fig_smoothed_8.png ✔ Assigned object `.airmiles` with value \"airmiles.csv\" and class \"character\". ✔ Assigned object `n_knot` with value 8 and class \"numeric\". ✔ Assigned object `.out` with value \"fig_smoothed_8.png\" and class \"character\". null device            1 . ├── airmiles.csv ├── fig_smoothed.R ├── fig_smoothed_8.png └── report.qmd"},{"path":"https://bayesiandemography.github.io/command/articles/quickstart.html","id":"what-cmd_assign-does-when-called-in-a-script","dir":"Articles","previous_headings":"","what":"What cmd_assign() does when called in a script","title":"Quick Start Guide","text":"cmd_assign() called script run command line, three things: Match command line arguments arguments cmd_assign(). Coerce value supplied command line class corresponding value call cmd_assign(). Assign resulting values global environment. Say, instance, script called model.R containing following call cmd_assign(). run model.R command line using first called, cmd_assign() holds following values: match step, `cmd_assign() finds values passed command line. First matches named arguments command line named arguments call, yielding matches unnamed arguments command line unused arguments call. matching unnamed arguments based order unnamed arguments supplied command line. example, value \"data/dataset2.csv\" passed \"/model2.rds\", \"data/dataset2.csv\" comes \"/model2.rds\" matched results. values supplied command line start text strings. coerce step, cmd_assign() converts values classs matched values cmd_assign(). example, means coercing \"10\" numeric coercing \"TRUE\" logical. Finally, assign step, cmd_assign() puts values global environment. number arguments passed command line must exactly match number arguments specified call cmd_assign(). Values specified call cmd_assign() act defaults. instance, example, cmd_assign() let us omit use_log, following invalid:","code":"cmd_assign(.data = \"data/dataset.csv\",            n_iter = 5,            use_log = TRUE,            .out = \"out/model.rds\") Rscript model.R data/dataset2.csv out/model2.rds --use_log=TRUE --n_iter=10 Rscript model.R data/dataset2.csv out/model2.rds --n_iter=10  # invalid!"},{"path":[]},{"path":"https://bayesiandemography.github.io/command/articles/quickstart.html","id":"argument-names-starting-with-a-dot","dir":"Articles","previous_headings":"Naming conventions","what":"Argument names starting with a dot","title":"Quick Start Guide","text":"examples far, objects holding paths filenames conformed particular naming convention convention: objects names start dot. instance: idea behind convention distinguish values references. n_iter use_log example hold values directly used analysis. .data ., contrast, describe values stored. distinction analogous one ordinary variables pointers C. access values referred “dot” variables, use function readRDS() read_csv(), dot-name convention compulsory, cmd_assign() check . convention nevertheless worth following, can easy practice get confused value reference value.","code":"cmd_assign(.data = \"data/dataset.csv\", # '.data' starts with a dot            n_iter = 5,            use_log = TRUE,            .out = \"out/model.rds\")     # '.out' starts with a dot data <- read_csv(.data)"},{"path":"https://bayesiandemography.github.io/command/articles/quickstart.html","id":"giving-code-files-and-outputs-the-same-base-name","dir":"Articles","previous_headings":"Naming conventions","what":"Giving code files and outputs the same base name","title":"Quick Start Guide","text":"Another feature examples far files R code base name files generated output. File fig_smoothed.R, instance, generated fig_smooth.png, fig_smooth_5.png, fig_smooth_8.png, fig_smooth_10.png, file model.R generated model.rds model2.rds. rely file extensions (eg .R vs .png) distinguish code outputs, use suffixes (eg _5, _8 _10) distinguish different versions output. Naming conventions like common system programming, good way signal relationship code outputs.","code":""},{"path":"https://bayesiandemography.github.io/command/articles/quickstart.html","id":"putting-calls-to-rscript-in-a-shell-script","dir":"Articles","previous_headings":"","what":"Putting calls to Rscript in a shell script","title":"Quick Start Guide","text":"can create data analysis workflow writing shell script calls Rscript. illustrate simple example. need two new files. first file, called report.qmd, creates report two figures. contains following code. second file, called workflow.sh, shell script runs whole workflow. contains following code: third command workflow.sh contains \"-e\" \"Rscript\". \"-e\" option tells Rscript use code one quoted R expressions (follow immediately \"-e\"), rather file. run workflow.sh. working directory now contains two graphs report (plus directory, called report_files, created quarto.) report looks like :  use spline smooth data passenger miles.","code":"--- title: \"Smoothed Passenger Miles\" format: html ---  We use a spline to smooth data on passenger miles.  ```{r} #| label: fig_smoothed_side_by_side #| echo: false #| layout-ncol: 2 knitr::include_graphics(c(\"fig_smoothed_5.png\", \"fig_smoothed_10.png\")) ``` Rscript fig_smoothed.R airmiles.csv 5 fig_smoothed_5.png   Rscript fig_smoothed.R airmiles.csv 10 fig_smoothed_10.png   Rscript -e \"quarto::quarto_render('report.qmd')\" bash workflow.sh ✔ Assigned object `.airmiles` with value \"airmiles.csv\" and class \"character\". ✔ Assigned object `n_knot` with value 5 and class \"numeric\". ✔ Assigned object `.out` with value \"fig_smoothed_5.png\" and class \"character\". null device            1  ✔ Assigned object `.airmiles` with value \"airmiles.csv\" and class \"character\". ✔ Assigned object `n_knot` with value 10 and class \"numeric\". ✔ Assigned object `.out` with value \"fig_smoothed_10.png\" and class \"character\". null device            1    processing file: report.qmd 1/3                             2/3 [fig_smoothed_side_by_side] 3/3                             output file: report.knit.md  pandoc    to: html   output-file: report.html   standalone: true   section-divs: true   html-math-method: mathjax   wrap: none   default-image-extension: png   variables: {}    metadata   document-css: false   link-citations: true   date-format: long   lang: en   title: Smoothed Passenger Miles    Output created: report.html . ├── airmiles.csv ├── fig_smoothed.R ├── fig_smoothed_10.png ├── fig_smoothed_5.png ├── fig_smoothed_8.png ├── report.html ├── report.qmd ├── report_files └── workflow.sh"},{"path":"https://bayesiandemography.github.io/command/articles/quickstart.html","id":"putting-calls-to-rscript-in-a-makefile","dir":"Articles","previous_headings":"","what":"Putting calls to Rscript in a makefile","title":"Quick Start Guide","text":"even better way organize data analysis workflow put Rscript commands makefile. introduction makefiles, see Project Management Make. makefile equivalent workflow.sh file: delete fig_smoothed_5.png run makefile. Whereas bash script workflow.sh recreated fig_smoothed_5.png, fig_smoothed_10.png report.html, Make recognises fig_smoothed_10.png still --date, recreates fig_smoothed_5.png report.html. Makefiles take time master, important advantages, discussed Workflow Data Analysis.","code":".PHONY: all all: report.pdf  fig_smoothed_5.png: fig_smoothed.R airmiles.csv     Rscript $^ $@ --n_knot=5    fig_smoothed_10.png: fig_smoothed.R airmiles.csv     Rscript $^ $@ --n_knot=10  report.pdf: report.qmd fig_smoothed_5.png fig_smoothed_10.png     Rscript -e \"quarto::quarto_render('$<')\" rm fig_smoothed_5.png make Rscript fig_smoothed.R airmiles.csv fig_smoothed_5.png --n_knot=5   ✔ Assigned object `.airmiles` with value \"airmiles.csv\" and class \"character\". ✔ Assigned object `n_knot` with value 5 and class \"numeric\". ✔ Assigned object `.out` with value \"fig_smoothed_5.png\" and class \"character\". null device            1  Rscript -e \"quarto::quarto_render('report.qmd')\"   processing file: report.qmd 1/3                             2/3 [fig_smoothed_side_by_side] 3/3                             output file: report.knit.md  pandoc    to: html   output-file: report.html   standalone: true   section-divs: true   html-math-method: mathjax   wrap: none   default-image-extension: png   variables: {}    metadata   document-css: false   link-citations: true   date-format: long   lang: en   title: Smoothed Passenger Miles    Output created: report.html"},{"path":"https://bayesiandemography.github.io/command/articles/quickstart.html","id":"sec:alt","dir":"Articles","previous_headings":"","what":"Alternatives to cmd_assign()","title":"Quick Start Guide","text":"cmd_assign() option processing command line arguments. One alternative cmdArgs() package R.utils, user-friendly version base R function commandArgs(). Another package docopt, can used construct interface script, including processing command line arguments. cmd_assign() specialised cmdArgs() docopt. focuses specifically task processing command line arguments part data analysis workflow.","code":""},{"path":"https://bayesiandemography.github.io/command/articles/workflow.html","id":"the-problem-of-writing-safe-flexible-data-analysis-code","dir":"Articles","previous_headings":"","what":"The problem of writing safe, flexible data analysis code","title":"A Workflow for Data Analysis","text":"classic example: big file difficult understand slow confusing/unreliable - re-run difficult debug split logical parts (modular), source helps doesn’t totally solve - confusing environment better: break pieces, run environment bit like functions (without global environment) push harder - make inputs outputs completely transparenet re-run - slow  difficult change polluted environment classic software solution: break small files run ? [https://stemurphy.com/post/rep_manu_think_about/]","code":""},{"path":"https://bayesiandemography.github.io/command/articles/workflow.html","id":"other-solutions","dir":"Articles","previous_headings":"","what":"Other solutions","title":"A Workflow for Data Analysis","text":"commandArgs docopt ? Principles file organization don’t distinguish intermediate final outputs (everything ) don’t number files","code":""},{"path":"https://bayesiandemography.github.io/command/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"John Bryant. Author, maintainer. Bayesian Demography Limited. Copyright holder.","code":""},{"path":"https://bayesiandemography.github.io/command/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bryant J (2025). command: Process Command Line Arguments. R package version 0.1.0, https://bayesiandemography.github.io/command/.","code":"@Manual{,   title = {command: Process Command Line Arguments},   author = {John Bryant},   year = {2025},   note = {R package version 0.1.0},   url = {https://bayesiandemography.github.io/command/}, }"},{"path":"https://bayesiandemography.github.io/command/index.html","id":"command","dir":"","previous_headings":"","what":"Process Command Line Arguments","title":"Process Command Line Arguments","text":"Process command line arguments part data analysis workflow. [cmd_assign()] main function. Quick Start Guide shows use cmd_assign(). Workflow Data Analysis presents approach design data analysis workflows.","code":""},{"path":"https://bayesiandemography.github.io/command/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Process Command Line Arguments","text":"","code":"devtools::install_github(\"bayesiandemography/command\")"},{"path":"https://bayesiandemography.github.io/command/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Process Command Line Arguments","text":"","code":"cmd_assign(.data = \"data/raw_data.csv\",            date_start = \"2025-01-01\",            trim_outliers = TRUE,        .out = \"out/cleaned_data.rds\")"},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign Values Passed at the Command Line or Interactively — cmd_assign","title":"Assign Values Passed at the Command Line or Interactively — cmd_assign","text":"Assign values names working environment. values typically supplied command line, can supplied interactively. Specifying inputs outputs scripts command line can contribute safter, modular workflows.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign Values Passed at the Command Line or Interactively — cmd_assign","text":"","code":"cmd_assign(...)"},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign Values Passed at the Command Line or Interactively — cmd_assign","text":"... Name-value pairs.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign Values Passed at the Command Line or Interactively — cmd_assign","text":"cmd_assign() called side effect, create objects global environment. However, cmd_assign() also invisibly returns named list objects.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":"types-of-session","dir":"Reference","previous_headings":"","what":"Types of session","title":"Assign Values Passed at the Command Line or Interactively — cmd_assign","text":"cmd_assign() behaves differently depending whether called interactively, inside R script run command line. instance, code cmd_assign(use_log = TRUE) run interactively, creates object called use_log value TRUE. code run inside script via command Rscript tidy_data.R --use_log=FALSE creates object called use_log value FALSE. cmd_assign() typically called interactively workflow developed, command line workflow matured.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":"matching-names-and-values","dir":"Reference","previous_headings":"","what":"Matching names and values","title":"Assign Values Passed at the Command Line or Interactively — cmd_assign","text":"used script called command line, cmd_assign() first matches named command line arguments, matches unnamed command line arguments, order supplied. , instance, script person.R contains lines   person.R run command line using   cmd_assign() first matches named command line argument --max_age=100 cmd_assign() argument max_age, matches unnamed command line arguments raw_data.csvandperson.rdstocmd_assign()arugments.dataand.`.","code":"cmd_assign(.data = \"raw_data.csv\",            max_age = 85,            .out = \"person.rds\") Rscript person.R raw_data.csv person.rds --max_age=100"},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":"coercing-values-passed-at-the-command-line","dir":"Reference","previous_headings":"","what":"Coercing values passed at the command line","title":"Assign Values Passed at the Command Line or Interactively — cmd_assign","text":"Values passed command line start text strings. cmd_assign() coerces text strings class corresponding values call cmd_assign(). instance, script called fit.R contains lines   fitted.R run command line using   cmd_assign() create character vector called .data value \"cleaned.rds\", logical vector called impute value TRUE, date vector called date value \"2025-01-01\", character vector called .value `\"fit.rds\".","code":"cmd_assign(.data = \"cleaned.rds\",            impute = TRUE,            date = as.Date(\"2026-01-01\"),            .out = \"fit.rds\") Rscript fitted.R cleaned.rds fit.rds --impute=TRUE --date=2025-01-01"},{"path":[]},{"path":"https://bayesiandemography.github.io/command/reference/cmd_assign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign Values Passed at the Command Line or Interactively — cmd_assign","text":"","code":"if (interactive()) {   cmd_assign(.data = \"mydata.csv\",              n_iter = 2000,              .out = \"results.rds\") }"},{"path":"https://bayesiandemography.github.io/command/reference/cmd_make.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a 'cmd_assign' Call into a Makefile Rule — cmd_make","title":"Turn a 'cmd_assign' Call into a Makefile Rule — cmd_make","text":"Construct Makefile rule call cmd_assign() inside R file.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/cmd_make.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a 'cmd_assign' Call into a Makefile Rule — cmd_make","text":"","code":"cmd_make(file, dir_make = NULL)"},{"path":"https://bayesiandemography.github.io/command/reference/cmd_make.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a 'cmd_assign' Call into a Makefile Rule — cmd_make","text":"file Path R code file containing call cmd_assign(). path starts dir_make. dir_make directory contains Makefile. default current working directory.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/cmd_make.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn a 'cmd_assign' Call into a Makefile Rule — cmd_make","text":"cmd_make() typically called side effect, print Makefile rule. However, cmd_make() invisibly returns text string rule.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/cmd_make.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Turn a 'cmd_assign' Call into a Makefile Rule — cmd_make","text":"Makefile data analysis workflow normally goes project directory.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/cmd_make.html","id":"the-components-of-a-makefile-rule","dir":"Reference","previous_headings":"","what":"The components of a Makefile rule","title":"Turn a 'cmd_assign' Call into a Makefile Rule — cmd_make","text":"Makefile rule produced cmd_make() normally looks something like   rule /model.rds \"target\", .e. file rule creates; src/model.R data/timeseries.rds \"prerequisites\", .e. files used create target; \\ \"line continuation character\"; start third line tab, telling make recipe creating target starts ; Rscript call utils::Rscript(); $^ automatic variable meaning \"prerequisites\" $@ automatic variable meaning \"target\", Rscript $^ $@ expands Rscript src/model.R data/cleaned.rds /model.rds; --use_log=TRUE named argument Rscript passes src/model.R","code":"out/model.rds: src/model.R \\   data/cleaned.rds        Rscript $^ $@ --use_log=TRUE"},{"path":"https://bayesiandemography.github.io/command/reference/cmd_make.html","id":"using-cmd-make-to-build-a-data-analysis-workflow","dir":"Reference","previous_headings":"","what":"Using cmd_make() to build a data analysis workflow","title":"Turn a 'cmd_assign' Call into a Makefile Rule — cmd_make","text":"Step 1. Write R file carries step analysis (eg tidying data, fitting model, making graph.) file contain call cmd_assign(),  appear first line Makefile rule. writing testing file, use cmd_assign() interactively. Step 2. R file working correctly, call cmd_make(), add rule Makefile. using cmd_make(), good idea set current working directory project directory (something happen automatically using RStudio projects.)","code":""},{"path":"https://bayesiandemography.github.io/command/reference/cmd_make.html","id":"identifying-file-arguments","dir":"Reference","previous_headings":"","what":"Identifying file arguments","title":"Turn a 'cmd_assign' Call into a Makefile Rule — cmd_make","text":"construct Makefile rule, cmd_make() needs able pick arguments refer file names. , uses following heuristic: call includes arguments whose names start dot, arguments assumed refer file names; otherwise, find arguments whose values actually file names (determined file.exists()), look like .","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/command/reference/cmd_make.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a 'cmd_assign' Call into a Makefile Rule — cmd_make","text":"","code":"library(fs)  ## Create project directory containing ## 'src' and 'out' directories path_project <- file_temp() dir_create(path_project) dir_create(path(path_project, \"src\")) dir_create(path(path_project, \"out\"))  ## Put R file in 'src' directory writeLines(c(\"cmd_assign(x = 1, .out = 'out/results.rds')\",              \"results <- x + 1\",              \"saveRDS(results, file = .out)\"),            con = path(path_project, \"src/results.R\"))  ## Look at directories dir_tree(path_project) #> /tmp/Rtmpbq1Rhn/file1da0303c0fd9 #> ├── out #> └── src #>     └── results.R  ## Look at contents of R file lines <- readLines(path(path_project, \"src/results.R\")) cat(paste(lines, collapse = \"\\n\")) #> cmd_assign(x = 1, .out = 'out/results.rds') #> results <- x + 1 #> saveRDS(results, file = .out)  ## call 'cmd_make()' cmd_make(file = \"src/results.R\",          dir_make = path_project) #> out/results.rds: src/results.R #> \tRscript $^ $@ --x=1  ## clean up dir_delete(path_project)"},{"path":"https://bayesiandemography.github.io/command/reference/cmd_shell.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a 'cmd_assign' Call into a Shell Command — cmd_shell","title":"Turn a 'cmd_assign' Call into a Shell Command — cmd_shell","text":"Construct shell command call cmd_assign() inside R file.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/cmd_shell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a 'cmd_assign' Call into a Shell Command — cmd_shell","text":"","code":"cmd_shell(file, dir_shell = NULL)"},{"path":"https://bayesiandemography.github.io/command/reference/cmd_shell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a 'cmd_assign' Call into a Shell Command — cmd_shell","text":"file Path R code file containing call cmd_assign(). path starts dir_shell. dir_shell directory contains shell script. default current working directory.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/cmd_shell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn a 'cmd_assign' Call into a Shell Command — cmd_shell","text":"cmd_shell() typically called side effect, print shell command. However, cmd_shell() invisibly returns text string command.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/cmd_shell.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Turn a 'cmd_assign' Call into a Shell Command — cmd_shell","text":"shell script data analysis workflow normally goes project directory.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/cmd_shell.html","id":"the-components-of-a-shell-command","dir":"Reference","previous_headings":"","what":"The components of a shell command","title":"Turn a 'cmd_assign' Call into a Shell Command — cmd_shell","text":"shell command produced cmd_make() normally looks something like   command Rscript call utils::Rscript(); \\ \"line continuation character\"; data/cleaned.rds /model.rds unnamed arguments Rscript passes src/model.R; --use_log=TRUE named argument Rscript passes src/model.R","code":"Rscript src/model.R \\   data/cleaned.rds \\   out/model.rds \\   --use_log=TRUE"},{"path":"https://bayesiandemography.github.io/command/reference/cmd_shell.html","id":"using-cmd-shell-to-build-a-data-analysis-workflow","dir":"Reference","previous_headings":"","what":"Using cmd_shell() to build a data analysis workflow","title":"Turn a 'cmd_assign' Call into a Shell Command — cmd_shell","text":"Step 1. Write R file carries step analysis (eg tidying data, fitting model, making graph.) file contain call cmd_assign(),  first argument passed Rscript shell command. writing testing file, use cmd_assign() interactively. Step 2. R file working correctly, call cmd_shell(), add command shell script.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/cmd_shell.html","id":"identifying-file-arguments","dir":"Reference","previous_headings":"","what":"Identifying file arguments","title":"Turn a 'cmd_assign' Call into a Shell Command — cmd_shell","text":"construct rule, cmd_shell() needs able identify arguments refer file name. , uses following heuristic: call includes arguments whose names start dot, arguments assumed refer file names; otherwise, find arguments whose values actually file names (determined file.exists()) look like .","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/command/reference/cmd_shell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a 'cmd_assign' Call into a Shell Command — cmd_shell","text":"","code":"library(fs)  ## Create project directory containing ## 'src' and 'out' directories path_project <- file_temp() dir_create(path_project) dir_create(path(path_project, \"src\")) dir_create(path(path_project, \"out\"))  ## Put R file in 'src' directory writeLines(c(\"cmd_assign(x = 1, .out = 'out/results.rds')\",              \"results <- x + 1\",              \"saveRDS(results, file = .out)\"),            con = path(path_project, \"src/results.R\"))  ## Look at directories dir_tree(path_project) #> /tmp/Rtmpbq1Rhn/file1da060194433 #> ├── out #> └── src #>     └── results.R  ## Look at contents of R file lines <- readLines(path(path_project, \"src/results.R\")) cat(paste(lines, collapse = \"\\n\")) #> cmd_assign(x = 1, .out = 'out/results.rds') #> results <- x + 1 #> saveRDS(results, file = .out)  ## call 'cmd_shell()' cmd_shell(file = \"src/results.R\",           dir_shell = path_project) #> Rscript src/results.R \\ #>   out/results.rds \\ #>   --x=1  ## clean up dir_delete(path_project)"},{"path":"https://bayesiandemography.github.io/command/reference/command-package.html","id":null,"dir":"Reference","previous_headings":"","what":"command: Process command line arguments — command-package","title":"command: Process command line arguments — command-package","text":"Process arguments passed command line, part data analysis workflow.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/command-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"command: Process command line arguments — command-package","text":"cmd_assign() main function. Quick Start Guide shows use cmd_assign(). Workflow Data Analysis presents approach design data analysis workflows.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/command/reference/command-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"command: Process command line arguments — command-package","text":"Maintainer: John Bryant john@bayesiandemography.com contributors: Bayesian Demography Limited [copyright holder]","code":""},{"path":"https://bayesiandemography.github.io/command/reference/makefile.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Makefile — makefile","title":"Create a Makefile — makefile","text":"Create Makefile data analysis workflow. Makefile can include rules extracted existing R files.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/makefile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Makefile — makefile","text":"","code":"makefile(files = NULL, dir_make = NULL, name_make = \"Makefile\")"},{"path":"https://bayesiandemography.github.io/command/reference/makefile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Makefile — makefile","text":"files path dir_make directory R files calls cmd_assign(). Optional. dir_make directory makefile() create Makefile. value supplied, `makefile(); creates Makefile current working directory. name_make name Makefile. default \"Makefile\".","code":""},{"path":"https://bayesiandemography.github.io/command/reference/makefile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Makefile — makefile","text":"makefile() called side effect, create file. However, makefile() also returns string text Makefile.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/makefile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Makefile — makefile","text":"create Makefile files directory, set files \".\". obtain contents Makefile without creating file disk, creating file disk, set name_make NULL. Supplying value files optional makefile(), compulsory shell_script(). output makefile() includes general-purpose Makefile commands, output shell_script() generated entirely files.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/command/reference/makefile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Makefile — makefile","text":"","code":"library(fs)  ## Create project directory containing ## 'src' and 'out' directories path_project <- file_temp() dir_create(path_project) dir_create(path(path_project, \"src\")) dir_create(path(path_project, \"out\"))  ## Put R code file in 'src' directory writeLines(c(\"cmd_assign(x = 1, .out = 'out/results.rds')\",              \"results <- x + 1\",              \"saveRDS(results, file = .out)\"),            con = path(path_project, \"src/results.R\"))  ## Look at directories dir_tree(path_project) #> /tmp/Rtmpbq1Rhn/file1da0a7adec9 #> ├── out #> └── src #>     └── results.R  ## Call 'makefile()' makefile(files = \"src\",          dir_make = path_project) #> ✔ Extracted call to `cmd_assign()` in src/results.R.  ## Look at directories dir_tree(path_project) #> /tmp/Rtmpbq1Rhn/file1da0a7adec9 #> ├── Makefile #> ├── out #> └── src #>     └── results.R  ## Look at contents of makefile lines <- readLines(path(path_project, \"Makefile\")) cat(paste(lines, collapse = \"\\n\")) #>  #> .PHONY: all #> all: #>  #>  #> out/results.rds: src/results.R #> \tRscript $^ $@ --x=1 #>  #>  #> .PHONY: clean #> clean: #> \trm -rf out #> \tmkdir out #>   ## Get the text of the Makefile ## without creating a file on disk text <- makefile(files = \"src\",                  dir_make = path_project,                  name_make = NULL) #> ✔ Extracted call to `cmd_assign()` in src/results.R. cat(text) #>  #> .PHONY: all #> all: #>  #>  #> out/results.rds: src/results.R #> \tRscript $^ $@ --x=1 #>  #>  #> .PHONY: clean #> clean: #> \trm -rf out #> \tmkdir out #>   ## Clean up dir_delete(path_project)"},{"path":"https://bayesiandemography.github.io/command/reference/shell_script.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Shell Script — shell_script","title":"Create a Shell Script — shell_script","text":"Create shell script data analysis workflow consisting commands extracted existing R files.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/shell_script.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Shell Script — shell_script","text":"","code":"shell_script(files, dir_shell = NULL, name_shell = \"workflow.sh\")"},{"path":"https://bayesiandemography.github.io/command/reference/shell_script.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Shell Script — shell_script","text":"files path dir_shell directory R files calls cmd_assign(). dir_shell directory shell_script() create shell script. value supplied, `shell_script(); creates shell script current working directory. name_shell name shell script. default \"workflow.sh\".","code":""},{"path":"https://bayesiandemography.github.io/command/reference/shell_script.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Shell Script — shell_script","text":"shell_script() called side effect, create file. However, shell_script() also returns string text shell script.","code":""},{"path":"https://bayesiandemography.github.io/command/reference/shell_script.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Shell Script — shell_script","text":"create shell script files directory, set files \".\". obtain contents shell script without creating file disk, creating file disk, set name_shell NULL. Supplying value files compulsory shell_script(), optional makefile(). output shell_script() generated entirely files output makefile() also includes general-purpose Makefile commands.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/command/reference/shell_script.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Shell Script — shell_script","text":"","code":"library(fs)  ## Create project directory containing ## 'src' and 'out' directories path_project <- file_temp() dir_create(path_project) dir_create(path(path_project, \"src\")) dir_create(path(path_project, \"out\"))  ## Put R code file in 'src' directory writeLines(c(\"cmd_assign(x = 1, .out = 'out/results.rds')\",              \"results <- x + 1\",              \"saveRDS(results, file = .out)\"),            con = path(path_project, \"src/results.R\"))  ## Look at directories dir_tree(path_project) #> /tmp/Rtmpbq1Rhn/file1da051923f30 #> ├── out #> └── src #>     └── results.R  ## Call 'shell_script()' shell_script(files = \"src\",              dir_shell = path_project) #> ✔ Extracted call to `cmd_assign()` in src/results.R.  ## Look at directories dir_tree(path_project) #> /tmp/Rtmpbq1Rhn/file1da051923f30 #> ├── out #> ├── src #> │   └── results.R #> └── workflow.sh  ## Look at contents of shell script lines <- readLines(path(path_project, \"workflow.sh\")) cat(paste(lines, collapse = \"\\n\")) #>  #> Rscript src/results.R \\ #>   out/results.rds \\ #>   --x=1 #>   ## Get the text of the shell script ## without creating a file on disk text <- shell_script(files = \"src\",                      dir_shell = path_project,                      name_shell = NULL) #> ✔ Extracted call to `cmd_assign()` in src/results.R. cat(text) #>  #> Rscript src/results.R \\ #>   out/results.rds \\ #>   --x=1 #>   ## Clean up dir_delete(path_project)"}]
