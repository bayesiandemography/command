% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extract_cmd.R
\name{extract_cmd_make}
\alias{extract_cmd_make}
\title{Turn a Call to 'cmd_assign()' Into a
Rule to Use in a Makefile}
\usage{
extract_cmd_make(file)
}
\arguments{
\item{file}{Path to an R script that
contains a call to \code{\link[=cmd_assign]{cmd_assign()}}.}
}
\value{
\code{extract_cmd_make()} is typically called
for its side effect, which is to print a
Makefile rule. However, \code{extract_cmd_make()}
invisibly returns a text string with the rule.
}
\description{
\code{extract_cmd_make()} locates a call to
\code{cmd_assign()} within an R code file,
constructs a Makefile rule to use with that
call, and prints the rule.
}
\section{The components of a Makefile rule}{
A typical rule produced by \code{extract_cmd_make()}
looks like this:

\if{html}{\out{<div class="sourceCode">}}\preformatted{out/model.rds: src/model.R \\
  data/timeseries.rds
       Rscript $^ $@ --use_log=TRUE \\
                     --date=2021-07-01
}\if{html}{\out{</div>}}

In this rule
\itemize{
\item \code{out/model.rds} is the 'target', the file that the rule creates
\item \code{src/model.R} and \code{data/timeseries.rds} are "prerequisites",
ie files that are used to create the target.
\item \verb{\\} is a "line continuation character" that tells \code{make} to
treat the next line as if it was part of the current line.
\item \verb{        Rscript $^ $@} is the first part of a 'recipe', ie
the instructions to create the target. \code{make} knows that this
is a recipe because the line starts with a tab.
\verb{$^} and \verb{$@} are an \href{https://www.gnu.org/software/make/manual/make.html#Automatic-Variables}{automatic variables}
meaning "all the prerequisites" and "the target", implying that \verb{Rscript $^ $@}
is equivalent to \verb{Rscript src/model.R data/timeseries out/model.rds}.
\item \code{--use_log=TRUE} and \code{--date=2021-07-01} are also part of the
recipe. They are options Rscript passes to `src/model.R
}
}

\section{How to use \code{extract_cmd_make()}.}{
\itemize{
\item Step 1. Write and test the R file
will be appear in the Makefile rule (eg \code{model.R}
in the example above.) When doing the writing and
testing, use \code{\link[=cmd_assign]{cmd_assign()}} interactively.
\item Step 2. Once the R file is working correctly,
call \code{extract_cmd_make()}, and add the results
to your Makefile.
}
}

\section{How \code{extract_cmd_make()} identifies file arguments}{
To construct the rule, \code{extract_cmd_make()} needs to
be able to distinguish between arguments
in the call to \code{cmd_assign()} which refer to a
file name (eg \code{.data = mydata.csv}) and
arguments which refer to something else
(eg \code{use_log = FALSE}).

\code{extract_cmd_make()} uses the following heuristic
to identify file arguments:
\itemize{
\item if any arguments start with a dot (eg \code{.data = mydata.csv})
then assume that all such arguments are file arguments;
\item otherwise, find values that that actually are file names
(as determined by \code{\link[base:files]{base::file.exists()}}) or that look
like they could be.
}
}

\examples{
file <- system.file("extdata/airmiles/fig_smoothed.R",
                    package = "command")
extract_cmd_make(file)
}
\seealso{
\itemize{
\item \code{\link[=extract_cmd_shell]{extract_cmd_shell()}} Turn a call to \code{\link[=cmd_assign]{cmd_assign()}}
into a command to use in a shell script
\item \code{\link[=makefile]{makefile()}} Create a makefile
\item \code{\link[=cmd_assign]{cmd_assign()}} Process command line arguments
\item \href{https://bayesiandemography.github.io/command/articles/quickstart.html}{Quick Start Guide}
How to use \code{cmd_assign()}
\item \href{https://bayesiandemography.github.io/command/articles/workflow.html}{A Workflow for Data Analysis}
Build data analysis pipelines using \code{cmd_assign()}.
\item \href{https://jeroenjanssens.com/dsatcl/chapter-6-project-management-with-make}{Project Management with Make}
Introduction to using \code{make} in data analysis pipelines.
\item \href{https://www.gnu.org/software/make/manual/make.html#SEC_Contents}{GNU make}
The definitive guide.
}
}
