% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shell_script.R
\name{shell_script}
\alias{shell_script}
\title{Create a Shell Script}
\usage{
shell_script(
  files,
  dir_shell = NULL,
  name_shell = "workflow.sh",
  overwrite = FALSE
)
}
\arguments{
\item{files}{A path from \code{dir_shell} to a
directory with R files that have calls to \code{\link[=cmd_assign]{cmd_assign()}}.}

\item{dir_shell}{The directory where
\code{shell_script()} will create the shell script.
If no value is supplied, then `shell_script();
creates the shell script the current working directory.}

\item{name_shell}{The name of the shell script.
The default is \code{"workflow.sh"}.}

\item{overwrite}{Whether to overwrite
an existing file. Default is \code{FALSE}.}
}
\value{
\code{shell_script()} is called for its
side effect, which is to create a
file. However, \code{shell_script()} also
returns a string with the text for a
shell script.
}
\description{
Create a shell script for a data analysis workflow
consisting of commands
extracted from existing R files.
}
\details{
To create a shell script in the \code{files}
directory, set \code{files} to \code{"."}.

To obtain the contents of the shell script
without creating a file on disk,
creating the file on disk, set
\code{name_shell} to \code{NULL}.

Supplying a value for \code{files} is
compulsory for \code{shell_script()},
but optional for \code{\link[=makefile]{makefile()}}.
The output from \code{shell_script()}
is generated entirely from \code{files}
while the output from \code{\link[=makefile]{makefile()}}
also includes some general-purpose Makefile
commands.
}
\examples{
library(fs)

## Create project directory containing
## 'src' and 'out' directories
path_project <- file_temp()
dir_create(path_project)
dir_create(path(path_project, "src"))
dir_create(path(path_project, "out"))

## Put R code file in 'src' directory
writeLines(c("cmd_assign(x = 1, .out = 'out/results.rds')",
             "results <- x + 1",
             "saveRDS(results, file = .out)"),
           con = path(path_project, "src/results.R"))

## Look at directories
dir_tree(path_project)

## Call 'shell_script()'
shell_script(files = "src",
             dir_shell = path_project)

## Look at directories
dir_tree(path_project)

## Look at contents of shell script
lines <- readLines(path(path_project, "workflow.sh"))
cat(paste(lines, collapse = "\n"))

## Get the text of the shell script
## without creating a file on disk
text <- shell_script(files = "src",
                     dir_shell = path_project,
                     name_shell = NULL)
cat(text)

## Clean up
dir_delete(path_project)
}
\seealso{
\itemize{
\item \code{\link[=cmd_shell]{cmd_shell()}} Turn a \code{\link[=cmd_assign]{cmd_assign()}} call
into a shell command
\item \code{\link[=makefile]{makefile()}} Create a Makefile
for a data analysis workflow
\item \code{\link[=cmd_assign]{cmd_assign()}} Process command line arguments
\item \href{https://bayesiandemography.github.io/command/articles/workflow.html}{A Workflow for Data Analysis}
Data analysis workflows using \code{cmd_assign()}.
\item Episodes 1--3 of \href{https://swcarpentry.github.io/shell-novice/index.html}{The Unix Shell}
Introduction to the command line
\item \href{https://swcarpentry.github.io/r-novice-inflammation/05-cmdline.html}{Command-Line Programs}
Introduction to Rscript
}
}
